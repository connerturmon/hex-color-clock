{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggleTimeString","setState","previousState","showTimeString","state","time","intervalRef","_this2","Date","setInterval","clearInterval","seconds","getSeconds","toString","minutes","getMinutes","hours","getHours","length","backgroundColor","concat","react_default","a","createElement","className","style","background","onClick","toLocaleTimeString","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNA4EeA,qBAxEb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KASRQ,iBAAmB,WAIjBP,EAAKQ,SAAS,SAACC,EAAeV,GAAhB,MAA2B,CAAEW,gBAAiBD,EAAcC,mBAZ1EV,EAAKW,MAAQ,CACXC,KAAM,KACNF,gBAAgB,GAGlBV,EAAKa,YAAc,KAPFb,oFAiBE,IAAAc,EAAAX,KAEnBA,KAAKK,SAAS,CAAEI,KAAM,IAAIG,OAG1BZ,KAAKU,YAAcG,YAAY,WAC7BF,EAAKN,SAAS,CAAEI,KAAM,IAAIG,QACzB,oDAKHE,cAAcd,KAAKU,8CAKnB,IAAIK,EAAUf,KAAKQ,MAAMC,KAAKO,aAAaC,WACvCC,EAAUlB,KAAKQ,MAAMC,KAAKU,aAAaF,WACvCG,EAAQpB,KAAKQ,MAAMC,KAAKY,WAAWJ,WAGnCF,EAAQO,OAAS,IACnBP,EAAU,IAAMA,GAEdG,EAAQI,OAAS,IACnBJ,EAAU,IAAMA,GAEdE,EAAME,OAAS,IACjBF,EAAQ,IAAMA,GAOhB,IAAIG,EAAe,IAAAC,OAAOJ,GAAPI,OAAeN,GAAfM,OAAyBT,GAE5C,OACEU,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAgBC,MAAO,CAAEC,WAAYP,IAChDvB,KAAKQ,MAAMD,gBACXkB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YAAYG,QAAS/B,KAAKI,kBACrCJ,KAAKQ,MAAMC,KAAKuB,uBAGlBhC,KAAKQ,MAAMD,gBACZkB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YAAYG,QAAS/B,KAAKI,kBACrCmB,WAjEKU,IAAMC,YCSJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhB,EAAAC,EAAAC,cAACe,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.fc8d4499.chunk.js","sourcesContent":["import React from 'react';\nimport './styles/App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      time: null,\n      showTimeString: false\n    }\n    // Used to clean up resources.\n    this.intervalRef = null;\n  }\n\n  toggleTimeString = () => {\n    // This is not a necessity, but will toggle between\n    // the hex color code time and regular time when you\n    // click on the clock.\n    this.setState((previousState, props) => ({ showTimeString: !previousState.showTimeString }));\n  }\n\n  componentWillMount() {\n    // Get the initial time upon loading the page.\n    this.setState({ time: new Date() });\n\n    // Get the current time every second.\n    this.intervalRef = setInterval(() => {\n      this.setState({ time: new Date() });\n    }, 1000);\n  }\n\n  componentWillUnmount() {\n    // Clear interval to clean up.\n    clearInterval(this.intervalRef);\n  }\n\n  render() {\n    // Convert time into strings.\n    let seconds = this.state.time.getSeconds().toString();\n    let minutes = this.state.time.getMinutes().toString();\n    let hours = this.state.time.getHours().toString();\n    // Make sure that the string is at least 2 digits\n    // so that it is a valid hex code.\n    if (seconds.length < 2) {\n      seconds = '0' + seconds;\n    }\n    if (minutes.length < 2) {\n      minutes = '0' + minutes;\n    }\n    if (hours.length < 2) {\n      hours = '0' + hours;\n    }\n\n    // Using the beauty and magic of template literals,\n    // we create a hex color code based on the time.\n    // This gets passed to our main container using React's\n    // 'style' attribute.\n    let backgroundColor = `#${hours}${minutes}${seconds}`;\n    \n    return (\n      <div className=\"app-container\" style={{ background: backgroundColor }}>\n        { this.state.showTimeString &&\n          <h1 className=\"hex-clock\" onClick={this.toggleTimeString}>\n            {this.state.time.toLocaleTimeString()}\n          </h1>\n        }\n        { !this.state.showTimeString &&\n          <h1 className=\"hex-clock\" onClick={this.toggleTimeString}>\n            {backgroundColor}\n          </h1>\n        }\n      </div>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}